Parallel Programmaing - COMS W4130 Fall '13

Team Members:
    Peter Njenga pwn2107
    Chris Kedzie crk2130

MiniProject 2: Parallel Hash Map


Our Parallel Hash object is backed by an array of lock free lists inspired by the lock free queue presented in class.
While conceptually simple, debugging parallel put/get operations can often be tricky and counter intuitive,
especially when trying to acertain what combination of actions is undoing your data structure.

Before thinking of performance, we had to gaurantee that any time we returned a
linearization point, there were no modifications to the list and node we were
currently in. Therefore, values stored in the list are AtomicLongs and before
getting or setting them, we get their value and then get the next linearization
point from the global AtomicLong counter. We check the value again, and if it
has changed then someone has modified this node and we must try again to
perform the get or set operation. Similary we had to ensure that no node was
added to the list while returning a default value, since this new node might
have the key we are looking for and our linearization point would be invalid.

On the performance front, we experimented with condor using the default values
of Hash as well as adjusting the ratio of gets w. r. t. total operations to .2.

     

